<?xml version="1.0" encoding="UTF-8" standalone="yes"?><sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" count="137" uniqueCount="117"><si><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">Lưu ý: </t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="14.0"/></rPr><t>Trình bày kiến thức theo ý hiểu, không copy paste :</t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">
- Sơ đồ có thể sử dụng Drawio hoặc VISIO để vẽ
- Trình bày mỗi buổi dạng Powerpoint</t></r></si><si><t>STT</t></si><si><t>Lớp</t></si><si><t>Câu hỏi</t></si><si><t>Yêu cầu</t></si><si><t>Tài liệu tham khảo</t></si><si><t>L0</t></si><si><t>Lớp 1</t></si><si><t>Khái niêm, Cách thức hoạt động của một website?
Sự khác biệt giữa client và server là gì?
Trình bày dưới dạng file PP, cần vẽ sơ đồ khối thể hiện (Nếu có khả năng)
Web Application và Web Server là gì và sự khác nhau
Ví dụ về các Web Application và Web Server thực tế</t></si><si><t>1. Hiểu khái niệm, cách hoạt động, có thể vẽ lại được mô hình hoạt động</t></si><si><t>https://vi.wikipedia.org/wiki/M%C3%B4_h%C3%ACnh_kh%C3%A1ch_%E2%80%93_ch%E1%BB%A7</t></si><si><t>Domain, DNS 
Trình bày dưới dạng file PP, cần vẽ sơ đồ khối thể hiện (Nếu có khả năng)</t></si><si><t>1. Hiểu cơ bản các khia niệm và các thành phần chính
2. Hiểu cách thức hoạt động</t></si><si><t>https://vi.wikipedia.org/wiki/T%C3%AAn_mi%E1%BB%81n</t></si><si><t xml:space="preserve">
HTTP: Request, Header, Payload, Response, Status Code
Trình bày dưới dạng file PP, cần vẽ sơ đồ khối thể hiện (Nếu có khả năng)</t></si><si><t>https://www.baeldung.com/cs/runtime-vs-compile-time</t></si><si><t>JVM:  Chi tiết khái niệm,  luồng, xử lý, thành phần, ứng dụng:
- Class Loader : Bootstrap Loader/ Extension Loader/ System Loader? 
- Class Loader : Cách thức hoạt động khi load bắt đầu từ main? 
- Class Loader : java.lang.ClassLoader, Exception
- JVM Memory: Method area, Stack, Heap, PC register, Native Method Stack
- JVM Memory: Exception xảy ra với Stack và Heap
- JVM Excute engine: GC, JIT, Interpreter, Compiler
Trình bày dưới dạng file PP, cần vẽ sơ đồ khối thể hiện (Nếu có khả năng)</t></si><si><t>1. Hiểu khái niệm, các hoạt động, có thể vẽ lại được mô hình hoạt động
2. Có thể viết 1 chương trình Java đơn giản và phân tích mã nguồn được xử lý như thế nào trong JVM</t></si><si><r><rPr/><t>Cơ bản:</t></r><r><rPr><color rgb="FF000000"/></rPr><t xml:space="preserve">
</t></r><r><rPr><color rgb="FF1155CC"/><u/></rPr><t>https://www.guru99.com/java-virtual-machine-jvm.html</t></r><r><rPr/><t xml:space="preserve">
Tài liệu chuyên sâu:
</t></r><r><rPr><color rgb="FF1155CC"/><u/></rPr><t>https://mihaimoldovan.com/download/Inside-Java-Virtual-Machine.pdf</t></r></si><si><t>JRE và JDK</t></si><si><t>https://www.codehub.com.vn/Java-Development-Kit-JDK-Java-Runtime-Environment-JRE-Java-Virtual-Machine-JVM-Khac-Nhau-Nhu-The-Nao</t></si><si><t>Interpreter vs Compiler</t></si><si><t>https://www.guru99.com/difference-compiler-vs-interpreter.html</t></si><si><t>Open JDK vs Oracle JDK</t></si><si><t>Biến trường JAVA_HOME:
- Ứng dụng, cách dùng
- Nếu không có biến môi trường thì điều gì xảy ra, có thể thay thế được không?

Trình bày dưới dạng file PP, cần vẽ sơ đồ khối thể hiện (Nếu có khả năng)</t></si><si><t>https://stackoverflow.com/questions/2025290/what-is-java-home-how-does-the-jvm-find-the-javac-path-stored-in-java-home</t></si><si><t>Java SE, Java ME, Java EE, Các kiểu ứng dụng chính của Java</t></si><si><t>Unicode trong Java</t></si><si><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">Lưu ý: </t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="14.0"/></rPr><t>Trình bày kiến thức theo ý hiểu, không copy paste :</t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">
- Sơ đồ có thể sử dụng Drawio hoặc VISIO để vẽ
- Trình bày mỗi buổi dạng Powerpoint</t></r></si><si><t>Lớp 2</t></si><si><t>Biến, mảng trong java.
Các kiểu dữ liệu trong java.</t></si><si><t>1. Hiểu khái niệm, cách dùng.</t></si><si><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://openplanning.net/11571/cac-kieu-du-lieu-trong-java
https://viettuts.vn/java/bien-trong-java</t></r><r><rPr><rFont val="Arial"/><color rgb="FF000000"/><u/></rPr><t xml:space="preserve">
</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://viettuts.vn/java/khai-bao-mang-trong-ja</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>va</t></r></si><si><t xml:space="preserve">  - Kiểu primitive.
  - Kiểu Wrapper
  - Sự khác nhau giữa primitive và Wrapper</t></si><si><t>1. Hiểu rõ sự khác nhau.
2. Trường hợp nào nên dùng primitive, trường hợp nào nên dùng wrapper.</t></si><si><t>https://www.javatpoint.com/wrapper-class-in-java
https://www.differencebetween.com/difference-between-wrapper-class-and-vs-primitive-type-in-java/#Wrapper%20Class%20in%20Java</t></si><si><t>String, StringBuilder, StringBufffer.
  - Tại sao String là bất biến?
  - String được lưu trữ trong bộ nhớ như thế nào?
  - String s = &quot;abc&quot;; khác gì String s = new String(&quot;abc&quot;);
  - So sánh String, StringBuilder, StringBuffer.</t></si><si><t>1. Hiểu rõ khái niệm.
2. Nắm rõ cách sử dụng từng loại.</t></si><si><t>Ép kiểu.
  - Ép kiểu dữ liệu.
  - Ép kiểu đối tượng.</t></si><si><t>1. Hiểu khái niệm và cách dùng.
2. Upcasting và Downcasting.</t></si><si><t>https://www.baeldung.com/java-type-casting</t></si><si><t>Constructor</t></si><si><t>1. Hiểu khái niệm của constructor.
2. Ngoài constructer còn cách nào khởi tạo đối tượng không?</t></si><si><t>https://niithanoi.edu.vn/tat-tan-tat-ve-constructor-trong-java.html</t></si><si><t>Access modifier:
  - private
  - default
  - protected
  - public</t></si><si><t>1. Hểu rõ khái niệm, cấp độ truy cập.
2. Sử dung với varriable, method, class.</t></si><si><t>https://www.javatpoint.com/access-modifiers</t></si><si><t>Non-access modifier:
  - abstract
  - static
  - final
  - synchronized
  - transient
  - volatile</t></si><si><t>1. Hiểu rõ khái niệm và các trường hợp sử dụng của từng loại.
2. Nắm rõ cách dùng khi kết hợp static với final, hoặc kết hợp thêm với access modifier.
  - Tại sao hằng số lại là &quot;static final&quot;?
3. Sử dung với varriable, method, class.
4. Static blocks? Default blocks?</t></si><si><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://www.baeldung.com/java-static#:~:text=In%20the%20Java%20programming%20language,all%20instances%20of%20the%20class.
https://www.geeksforgeeks.org/final-keyword-in-java</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t xml:space="preserve">/
</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://huongdanjava.com/vi/non-access-modifier-trong-java.html</t></r></si><si><t>Abstract và Interface</t></si><si><t>1. Nắm rõ được khái niệm, sự khác biệt của Abtract và Interface.
2. Trường hợp sử dụng.
3. Sự khác biệt giữa extend, implement.</t></si><si><t>https://www.guru99.com/interface-vs-abstract-class-java.html#:~:text=An%20abstract%20class%20permits%20you,class%20can%20implement%20multiple%20interfaces.</t></si><si><t>OOP trong lập trình.</t></si><si><t>1. Nắm rõ khái niệm OOP.
2. Nắm được ưu nhược điểm của OOP..</t></si><si><t>https://itviec.com/blog/oop-la-gi/</t></si><si><t>OOP trong Java.</t></si><si><t>https://xuanthulab.net/lap-trinh-huong-doi-tuong-trong-java.html</t></si><si><t>Đóng gói trong Java
  - private, default, protected, public - cấp độ truy cập
  - getter và setter</t></si><si><t>1. Nắm rõ khái niệm và cách dùng.</t></si><si><t>https://techvidvan.com/tutorials/java-encapsulation/</t></si><si><t>Kế thừa trong Java
  - Từ khoá this
  - Từ khoá super
  - Đơn kế thừa, kế thừa nhiều cấp, kế thừa phân cấp.</t></si><si><t>https://techvidvan.com/tutorials/java-inheritance/</t></si><si><t>Đa hình trong Java
  - Đa hình trong complie time - Overloading
  - Đa hình trong run time - Overriding</t></si><si><t>1. Nắm rõ khái niệm và cách dùng.
2. Ưu nhược điểm của đa hình</t></si><si><t>https://www.mygreatlearning.com/blog/polymorphism-in-java/#:~:text=Polymorphism%20in%20Java%20is%20the,test%20is%20polymorphic%20in%20Java.</t></si><si><t>Trừu tượng trong Java
  - abstract class và abstract method.
  - interface
  - Mức độ trừu tượng của abstract và interface</t></si><si><t>https://techvidvan.com/tutorials/abstraction-in-java/#:~:text=In%20Java%2C%20Data%20Abstraction%20is,of%20communicating%20with%20other%20objects).</t></si><si><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">Lưu ý: </t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="14.0"/></rPr><t>Trình bày kiến thức theo ý hiểu, không copy paste :</t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">
- Sơ đồ có thể sử dụng Drawio hoặc VISIO để vẽ
- Trình bày mỗi buổi dạng Powerpoint</t></r></si><si><t>Lớp 3</t></si><si><t>Java I/O
 - ByteStream.
 - CharacterStream</t></si><si><t xml:space="preserve"> - Hiểu rõ khái niệm
 - Stream là gì?
 - Bộ đệm trong stream. Tại sao lại cần?</t></si><si><t>https://www.geeksforgeeks.org/java-io-tutorial/</t></si><si><t xml:space="preserve"> - System.in
 - System.out
 - System.err</t></si><si><t xml:space="preserve"> - Hiểu rõ khái niệm, cách dùng.
 - So sánh System.out và System.err.
 - Code ví dụ.</t></si><si><t>ByteStream
 - BufferedInputStream
 - DataInputStream
 - FileInputStream
 - InputStream
 - PrintStream
 - BufferedOutputStream
 - DataOutputStream
 - FileOutputStream
 - OutputStream</t></si><si><t xml:space="preserve">  - Hiểu rõ khái niệm, cách dùng.
  - Code ví dụ.
  - Sự khác biệt giữa các ByteStream.</t></si><si><t>CharacterStream
 - BufferedReader
 - FileReader
 - InputStreamReader
 - OutputStreamReader
 - Reader
 - PrintWriter
 - Writer
 - BufferedWriter
 - FileWriter</t></si><si><t xml:space="preserve">  - Hiểu rõ khái niệm, cách dùng.
  - Code ví dụ.
  - Sự khác biệt giữa các CharacterStream.</t></si><si><t xml:space="preserve">Java Thread
</t></si><si><t xml:space="preserve">  - Hiểu rõ khái niệm.
  - Cách để khai báo một thread? Ưu nhược điểm của mỗi cách?
  - Đặc điểm của thread?</t></si><si><t>https://viblo.asia/p/multithreading-cac-cach-khoi-tao-va-su-dung-java-thread-5y8Rr7n0Mob3</t></si><si><t>Thread - Vòng đời của một thread.</t></si><si><t xml:space="preserve">  - Hiểu rõ các trạng thái của một thread.
  - Code ví dụ.</t></si><si><t>https://www.baeldung.com/java-thread-lifecycle</t></si><si><t>Một số thông tin liên quan đến thread:
 - Định danh của luồng  - ThreadId
 - Tên của luồng - ThreadName
 - Độ ưu tiên của luồng - Priority</t></si><si><t>https://gpcoder.com/3484-lap-trinh-da-luong-trong-java-java-multi-threading/</t></si><si><t>Xử lý ngoại lệ cho thread.</t></si><si><t xml:space="preserve">  - Nắm rõ tách dụng và cách dùng.</t></si><si><t>https://www.scientecheasy.com/2020/08/thread-exception-in-java.html/</t></si><si><t xml:space="preserve">Multiple threads
</t></si><si><t xml:space="preserve">  - Tại sao lại cần multiple threads? Nó có ưu, nhược điểm gì?
  - Tối đa được bao nhiêu thread?
  - Thread pool là gì?
  - Thread safe là gì?
  - Tối đa mỗi thread pool có bao nhiêu thread?
  - Mình có thể để tối đa bao nhiêu thread pool?
  - Code ví dụ.</t></si><si><t>Non-access modifier liên quan:
 - synchronized
 - volatile</t></si><si><t xml:space="preserve">  - HIểu rõ cách dùng và các chú ý.</t></si><si><t>https://viblo.asia/p/java-synchronized-blocks-jlA7GK04vKZQ
https://viblo.asia/p/java-volatile-Ljy5VXLVZra</t></si><si><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">Lưu ý: </t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="14.0"/></rPr><t>Trình bày kiến thức theo ý hiểu, không copy paste :</t></r><r><rPr><rFont val="Arial"/><b/><color rgb="FFFF0000"/><sz val="12.0"/></rPr><t xml:space="preserve">
- Sơ đồ có thể sử dụng Drawio hoặc VISIO để vẽ
- Trình bày mỗi buổi dạng Powerpoint</t></r></si><si><t>Lớp 4</t></si><si><t>Collection: Định nghĩa, thành phần, hệ thống cấp bậc</t></si><si><t>- Hiểu được định nghĩa Collection. 
- Các thành phần của Collection
- Vẽ hệ thống cấp bậc trong Collection
- Các phương thức của interface Collection
- Generic Collection và Non-generic Collection</t></si><si><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://viettuts.vn/java-collection</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t xml:space="preserve"> </t></r><r><rPr><rFont val="Arial"/><color rgb="FF000000"/><u/></rPr><t xml:space="preserve">
</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html
https://www.geeksforgeeks.org/java-collection-tutorial/
https://www.geeksforgeeks.org/collections-in-java-2/?ref=</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t xml:space="preserve">lbp </t></r></si><si><t>- Iterable
- Iterator</t></si><si><t>- Định nghĩa Iterable, Iterator
- Các phương thức của Itorator</t></si><si><t>Interface List
- ArrayList
- LinkedList
- Vector</t></si><si><t>- Định nghĩa List, các phương thức, các lớp thi hành trong List
- Phân biệt ArrayList, LinkedList, Vector (Cấu trúc, thao tác thêm, xóa, truy xuất, cách sử dụng)
- So sánh Array và ArrayList
- Demo bằng example trên java</t></si><si><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://viettuts.vn/java-collection/su-khac-nhau-giua-arraylist-va-linkedlist</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t xml:space="preserve"> </t></r><r><rPr><rFont val="Arial"/><color rgb="FF000000"/><u/></rPr><t xml:space="preserve">
</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://viettuts.vn/java-collection/su-khac-nhau-giua-arraylist-va-vector</t></r></si><si><t>Queue:
- LinkedList
- PriorityQueue
- ArrayDeque</t></si><si><t>- Định nghĩa Queue, cách thức hoạt động, các class triển khai, các pương thức
- Demo bằng example trên java</t></si><si><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://www.geeksforgeeks.org/queue-interface-java/?ref=leftbar-rightbar</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t xml:space="preserve"> </t></r><r><rPr><rFont val="Arial"/><color rgb="FF000000"/><u/></rPr><t xml:space="preserve">
</t></r><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://viettuts.vn/cau-truc-du-lieu-va-giai-thuat/cau-truc-du-lieu-hang-doi-queue</t></r></si><si><t>Set:
- HashSet
- TreeSet
- LinkedHashSet
- EnumSet</t></si><si><t>- Định nghĩa,các phương thức, các class triển khai
- So sánh HashSet, TreeSet, LinkedHashSet, EnumSet
- Demo bằng example trên java</t></si><si><t xml:space="preserve">https://www.geeksforgeeks.org/set-in-java/?ref=lbp
https://viettuts.vn/java-collection/set-trong-java
https://viettuts.vn/java-collection/linkedhashset-trong-java
https://viettuts.vn/java-collection/hashset-trong-java
https://viettuts.vn/java-collection/treeset-trong-java
</t></si><si><t>Map</t></si><si><t>- Định nghĩa map, các phương thức, các class triển khai
- So sánh Map và Set
- Demo bằng example trên java</t></si><si><r><rPr><rFont val="Arial"/><color rgb="FF1155CC"/><u/></rPr><t>https://www.geeksforgeeks.org/map-interface-java-examples/?ref=lbp
https://viettuts.vn/java-collection/map-trong-jav</t></r><r><rPr><rFont val="Arial"/><color rgb="FF000000"/><u/></rPr><t xml:space="preserve">a </t></r></si><si><t>Collections</t></si><si><t>- Định nghĩa Collections
- Các thao tác thường sử dụng:
  + Thêm phần tử
  + Sắp xếp
  + Tìm kiếm
  + Copy phần tử
- Demo bằng example trên java</t></si><si><t>https://www.geeksforgeeks.org/collections-class-in-java/?ref=lbp</t></si></sst>